"""
This module is used for loading weather data and 
electric load consumption data.
"""

import pandas as pd


def weather(path):
    """Read hourly weather data downloaded by scrape_weather_data.py

    Args:
        path (str): csv weather data file path.

    Returns:
        A pandas DataFrame.
    """
    weather = pd.read_csv(path)
    # there may have more than one observation at a given hour
    weather = weather.drop_duplicates(
        subset='Unnamed: 0', keep='last').set_index('Unnamed: 0')
    weather.index = pd.to_datetime(weather.index)
    weather.head()
    return weather


def elec(path):
    """Read 15min electric consumption data.

    Args:
        path (str): csv elec data file path.

    Returns:
        Hourly elec DataFrame.
    """
    df = pd.read_excel(
        path, parse_cols='B, D, F:H, J, L, M, O').set_index('stat_time')
    df = df.resample('H').sum()
    return df


def merge_elec_and_weather(df_elec, df_weather, startDate, endDate):
    """
    Merge elec and weather data frame.
    df_elec contains hourly data, but df_weather may not have data for every hour.
    If this is the case, those NaN values will be filled by method=bfill.

    Args:
        df_elec: DataFrame generated by read_elec_data.
        df_weather: DataFrame generated by read_weather_data.
        starDate, endDate: Make two df index corresponding.

    Returns:
        A merged DataFrame.
    """
    df_elec = df_elec[startDate:endDate]
    df_weather = df_weather[startDate:endDate]
    if len(df_elec) != len(df_weather):
        big_data = pd.merge(
            df_elec.reset_index(), df_weather.reset_index(), how='outer',
            left_on='stat_time', right_on='Unnamed: 0')
        big_data[['tempm', 'hum', 'wspdm', 'precipm', 'conds']] = big_data[['tempm', 'hum', 'wspdm',
                                                                            'precipm', 'conds']].fillna(method='bfill')
        big_data = big_data.drop('Unnamed: 0', axis=1).set_index('stat_time')
    else:
        big_data = pd.merge(
            df_elec, df_weather, left_index=True, right_index=True)
    return big_data


def drop_col(big_data, keep_columns=['kwh', 'tempm']):
    """
    Drop some 'useless' columns.

    Args:
        big_data: the 'raw' DataFrame containing many columns.
        keep_columns: a list of columns to keep.

    Returns:
        elec_and_weather DataFrame
    """
    return big_data.drop(big_data.columns.drop(keep_columns),
                         axis=1)
